# UEX Personal Discord Bot Development Rules

This document outlines the rules and guidelines for developing the new UEX Personal Discord Bot, as detailed in the `MIGRATION-PLAN.md`. The goal is to create a self-hostable bot that provides UEX notifications via private Direct Messages.

## 1. Core Goal & Philosophy

- **Primary Objective**: Build a Node.js application that any user can easily deploy to a free hosting service.
- **User-Centric Design**: The bot is for personal use. All notifications must be sent as Direct Messages (DMs) to the user who deployed the bot. No more public channel messages.
- **Privacy First**: Each bot instance is independent. There is no shared database or infrastructure. All data (API keys, user ID) is stored in the user's own environment variables.
- **Technology**: The stack is Node.js, `discord.js` v14, `express`, and `dotenv`.

## 2. Architecture

- **Application Type**: A persistent, long-running Node.js server, NOT serverless functions.
- **Main Components**:
    1.  **Express Server**: Listens for incoming HTTP requests.
        - It MUST have a `/health` endpoint for monitoring.
        - It MUST have a `/webhook/uex` endpoint to receive webhooks from UEX Corp.
    2.  **Discord.js Client**: Connects to Discord's Gateway to send DMs and handle commands.
- **Data Flow**:
    - **Incoming Webhook**: `UEX Corp -> POST /webhook/uex -> Webhook Handler -> Sends DM to User`.
    - **Outgoing Command**: `User sends DM command -> Discord Gateway -> Command Handler -> UEX API`.

## 3. File Structure

Adhere strictly to the following file structure. Do not create files outside of this structure unless specified.

```
/
├── src/
│   ├── bot.js              # Main entry point: Initializes Express and Discord client.
│   ├── commands/           # Folder for all Discord slash commands.
│   │   └── *.js            # Each file is a separate command (e.g., reply.js).
│   ├── handlers/           # Logic for handling external interactions.
│   │   ├── webhook.js      # Logic for the /webhook/uex endpoint. Parses request, sends DM.
│   │   └── uex-api.js      # All functions for communicating with the UEX Corp API.
│   └── utils/              # Shared helper functions.
│       ├── config.js       # Loads and exports all environment variables using `dotenv`.
│       └── logger.js       # (Optional) Simple logging utility.
├── docs/                   # All user-facing documentation.
├── .env.example            # Template for users to create their .env file.
├── package.json            # Project dependencies and scripts.
└── README.md               # Main user guide.
```

## 4. Coding Standards & Patterns

- **Asynchronous Operations**: Use `async/await` for all promises (e.g., Discord API calls, fetching from UEX API).
- **Modularity**:
    - Command logic MUST be in its own file within `src/commands/`.
    - UEX API calls MUST be encapsulated in functions within `src/handlers/uex-api.js`.
    - Webhook processing logic MUST be in `src/handlers/webhook.js`.
- **Discord Interactions**:
    - Use `discord.js` v14 builders for slash commands and embeds.
    - DMs are sent by fetching the user via `client.users.fetch(config.DISCORD_USER_ID)`.
- **Error Handling**: Implement `try...catch` blocks for all operations that can fail, especially API calls and webhook processing. Log errors clearly.

## 5. Environment Variables

- **Source of Truth**: All configuration and secrets MUST come from environment variables, loaded by `src/utils/config.js`.
- **No Hardcoding**: Never hardcode API tokens, secrets, or user IDs.
- **Required Variables**:
    - `DISCORD_BOT_TOKEN`: The token for the user's personal bot.
    - `DISCORD_USER_ID`: The user's own Discord ID, for receiving DMs.
    - `UEX_API_TOKEN`: UEX API key.
    - `UEX_SECRET_KEY`: UEX API secret.
    - `UEX_WEBHOOK_SECRET`: For validating incoming webhooks.
    - `PORT`: The port for the Express server (often set by the hosting platform).

## 6. Deployment & Documentation

- **Start Script**: `package.json` must contain a `"start": "node src/bot.js"` script for production deployment.
- **Local Development**: A `"dev": "nodemon src/bot.js"` script should be available for local testing.
- **Documentation**: All user-facing setup instructions, deployment guides, and troubleshooting steps belong in the `docs/` directory or the main `README.md`. 